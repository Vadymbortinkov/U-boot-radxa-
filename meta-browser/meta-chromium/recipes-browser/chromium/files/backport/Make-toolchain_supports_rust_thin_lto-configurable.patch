From d5a13b62ce90ebc1490e8546a8caef664e727dd7 Mon Sep 17 00:00:00 2001
From: Max Ihlenfeldt <max@igalia.com>
Date: Thu, 18 Jan 2024 17:25:32 +0000
Subject: [PATCH] Backport "Make toolchain_supports_rust_thin_lto configurable"

This backports a patch needed to make our Rust build setup work. It will
be included in upstream's 123 release.

Upstream-Status: Backport [https://crrev.com/c/5233602]
Signed-off-by: Max Ihlenfeldt <max@igalia.com>
---
 build/config/compiler/BUILD.gn |  2 +-
 build/config/rust.gni          | 22 +++++++++++-----------
 2 files changed, 12 insertions(+), 12 deletions(-)

diff --git a/build/config/compiler/BUILD.gn b/build/config/compiler/BUILD.gn
index f18ea0a..118e379 100644
--- a/build/config/compiler/BUILD.gn
+++ b/build/config/compiler/BUILD.gn
@@ -1014,7 +1014,7 @@ config("compiler") {
   if (rust_abi_target != "") {
     rustflags += [ "--target=$rust_abi_target" ]
   }
-  if (!use_thin_lto) {
+  if (!use_thin_lto || !toolchain_supports_rust_thin_lto) {
     # Don't include bitcode if it won't be used.
     rustflags += [ "-Cembed-bitcode=no" ]
   }
diff --git a/build/config/rust.gni b/build/config/rust.gni
index 6213b72..b2866b3 100644
--- a/build/config/rust.gni
+++ b/build/config/rust.gni
@@ -66,6 +66,17 @@ declare_args() {
   # you can specify whether it supports nacl here.
   rust_toolchain_supports_nacl = false

+  # Whether artifacts produced by the Rust compiler can participate in ThinLTO.
+  #
+  # One important consideration is whether the linker uses the same LLVM
+  # version as `rustc` (i.e. if it can understand the LLVM-IR from the
+  # compilation artifacts produced by `rustc`).  In LaCrOS and ash builds this
+  # may not be true - see b/299483903.
+  #
+  # TODO(https://crbug.com/1482525): Re-enable ThinLTO for Rust on LaCrOS
+  # TODO(b/300937673): Re-enable ThinLTO for Rust on ash-chrome
+  toolchain_supports_rust_thin_lto = !is_chromeos
+
   # Any extra std rlibs in your Rust toolchain, relative to the standard
   # Rust toolchain. Typically used with 'rust_sysroot_absolute'
   added_rust_stdlib_libs = []
@@ -161,17 +172,6 @@ if (enable_rust) {
 # for gtests from the `//testing/test:test` template.
 can_build_rust_unit_tests = toolchain_has_rust && !is_android

-# Whether artifacts produced by the Rust compiler can participate in ThinLTO.
-#
-# One important consideration is whether the linker uses the same LLVM
-# version as `rustc` (i.e. if it can understand the LLVM-IR from the
-# compilation artifacts produced by `rustc`).  In LaCrOS and ash builds this may
-# not be true - see b/299483903.
-#
-# TODO(https://crbug.com/1482525): Re-enable ThinLTO for Rust on LaCrOS
-# TODO(b/300937673): Re-enable ThinLTO for Rust on ash-chrome
-toolchain_supports_rust_thin_lto = !is_chromeos
-
 # We want to store rust_sysroot as a source-relative variable for ninja
 # portability. In practice if an external toolchain was specified, it might
 # be an absolute path, but we'll do our best.
